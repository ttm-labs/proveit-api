"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.job_interview_service = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.3
 * source: job_interview.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = __importStar(require("./google/protobuf/timestamp"));
const pb_1 = __importStar(require("google-protobuf"));
const grpc_1 = __importStar(require("@grpc/grpc-js"));
var job_interview_service;
(function (job_interview_service) {
    var _CreateJobInterviewRequest_one_of_decls, _CreateJobInterviewResponse_one_of_decls, _ReadJobInterviewRequest_one_of_decls, _ReadJobInterviewResponse_one_of_decls, _UpdateJobInterviewRequest_one_of_decls, _UpdateJobInterviewResponse_one_of_decls, _DeleteJobInterviewRequest_one_of_decls, _DeleteJobInterviewResponse_one_of_decls, _InterviewMessageRequest_one_of_decls, _InterviewMessageResponse_one_of_decls, _InterviewMessage_one_of_decls, _Message_one_of_decls;
    class CreateJobInterviewRequest extends pb_1.Message {
        constructor(data) {
            super();
            _CreateJobInterviewRequest_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _CreateJobInterviewRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("job_application_id" in data && data.job_application_id != undefined) {
                    this.job_application_id = data.job_application_id;
                }
            }
        }
        get job_application_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set job_application_id(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new CreateJobInterviewRequest({});
            if (data.job_application_id != null) {
                message.job_application_id = data.job_application_id;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.job_application_id != null) {
                data.job_application_id = this.job_application_id;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.job_application_id.length)
                writer.writeString(1, this.job_application_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateJobInterviewRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.job_application_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return CreateJobInterviewRequest.deserialize(bytes);
        }
    }
    _CreateJobInterviewRequest_one_of_decls = new WeakMap();
    job_interview_service.CreateJobInterviewRequest = CreateJobInterviewRequest;
    class CreateJobInterviewResponse extends pb_1.Message {
        constructor(data) {
            super();
            _CreateJobInterviewResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _CreateJobInterviewResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("job_interview_id" in data && data.job_interview_id != undefined) {
                    this.job_interview_id = data.job_interview_id;
                }
            }
        }
        get job_interview_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set job_interview_id(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new CreateJobInterviewResponse({});
            if (data.job_interview_id != null) {
                message.job_interview_id = data.job_interview_id;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.job_interview_id != null) {
                data.job_interview_id = this.job_interview_id;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.job_interview_id.length)
                writer.writeString(1, this.job_interview_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateJobInterviewResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.job_interview_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return CreateJobInterviewResponse.deserialize(bytes);
        }
    }
    _CreateJobInterviewResponse_one_of_decls = new WeakMap();
    job_interview_service.CreateJobInterviewResponse = CreateJobInterviewResponse;
    class ReadJobInterviewRequest extends pb_1.Message {
        constructor(data) {
            super();
            _ReadJobInterviewRequest_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _ReadJobInterviewRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("job_interview_id" in data && data.job_interview_id != undefined) {
                    this.job_interview_id = data.job_interview_id;
                }
            }
        }
        get job_interview_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set job_interview_id(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new ReadJobInterviewRequest({});
            if (data.job_interview_id != null) {
                message.job_interview_id = data.job_interview_id;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.job_interview_id != null) {
                data.job_interview_id = this.job_interview_id;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.job_interview_id.length)
                writer.writeString(1, this.job_interview_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadJobInterviewRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.job_interview_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return ReadJobInterviewRequest.deserialize(bytes);
        }
    }
    _ReadJobInterviewRequest_one_of_decls = new WeakMap();
    job_interview_service.ReadJobInterviewRequest = ReadJobInterviewRequest;
    class ReadJobInterviewResponse extends pb_1.Message {
        constructor(data) {
            super();
            _ReadJobInterviewResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], __classPrivateFieldGet(this, _ReadJobInterviewResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("job_application_id" in data && data.job_application_id != undefined) {
                    this.job_application_id = data.job_application_id;
                }
                if ("conversation" in data && data.conversation != undefined) {
                    this.conversation = data.conversation;
                }
            }
        }
        get job_application_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set job_application_id(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get conversation() {
            return pb_1.Message.getRepeatedWrapperField(this, Message, 2);
        }
        set conversation(value) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data) {
            const message = new ReadJobInterviewResponse({});
            if (data.job_application_id != null) {
                message.job_application_id = data.job_application_id;
            }
            if (data.conversation != null) {
                message.conversation = data.conversation.map(item => Message.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.job_application_id != null) {
                data.job_application_id = this.job_application_id;
            }
            if (this.conversation != null) {
                data.conversation = this.conversation.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.job_application_id.length)
                writer.writeString(1, this.job_application_id);
            if (this.conversation.length)
                writer.writeRepeatedMessage(2, this.conversation, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadJobInterviewResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.job_application_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.conversation, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Message.deserialize(reader), Message));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return ReadJobInterviewResponse.deserialize(bytes);
        }
    }
    _ReadJobInterviewResponse_one_of_decls = new WeakMap();
    job_interview_service.ReadJobInterviewResponse = ReadJobInterviewResponse;
    class UpdateJobInterviewRequest extends pb_1.Message {
        constructor(data) {
            super();
            _UpdateJobInterviewRequest_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], __classPrivateFieldGet(this, _UpdateJobInterviewRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("job_interview_id" in data && data.job_interview_id != undefined) {
                    this.job_interview_id = data.job_interview_id;
                }
                if ("conversation" in data && data.conversation != undefined) {
                    this.conversation = data.conversation;
                }
            }
        }
        get job_interview_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set job_interview_id(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get conversation() {
            return pb_1.Message.getRepeatedWrapperField(this, Message, 2);
        }
        set conversation(value) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data) {
            const message = new UpdateJobInterviewRequest({});
            if (data.job_interview_id != null) {
                message.job_interview_id = data.job_interview_id;
            }
            if (data.conversation != null) {
                message.conversation = data.conversation.map(item => Message.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.job_interview_id != null) {
                data.job_interview_id = this.job_interview_id;
            }
            if (this.conversation != null) {
                data.conversation = this.conversation.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.job_interview_id.length)
                writer.writeString(1, this.job_interview_id);
            if (this.conversation.length)
                writer.writeRepeatedMessage(2, this.conversation, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateJobInterviewRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.job_interview_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.conversation, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Message.deserialize(reader), Message));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return UpdateJobInterviewRequest.deserialize(bytes);
        }
    }
    _UpdateJobInterviewRequest_one_of_decls = new WeakMap();
    job_interview_service.UpdateJobInterviewRequest = UpdateJobInterviewRequest;
    class UpdateJobInterviewResponse extends pb_1.Message {
        constructor(data) {
            super();
            _UpdateJobInterviewResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _UpdateJobInterviewResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false);
        }
        set success(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new UpdateJobInterviewResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateJobInterviewResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return UpdateJobInterviewResponse.deserialize(bytes);
        }
    }
    _UpdateJobInterviewResponse_one_of_decls = new WeakMap();
    job_interview_service.UpdateJobInterviewResponse = UpdateJobInterviewResponse;
    class DeleteJobInterviewRequest extends pb_1.Message {
        constructor(data) {
            super();
            _DeleteJobInterviewRequest_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _DeleteJobInterviewRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("job_interview_id" in data && data.job_interview_id != undefined) {
                    this.job_interview_id = data.job_interview_id;
                }
            }
        }
        get job_interview_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set job_interview_id(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new DeleteJobInterviewRequest({});
            if (data.job_interview_id != null) {
                message.job_interview_id = data.job_interview_id;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.job_interview_id != null) {
                data.job_interview_id = this.job_interview_id;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.job_interview_id.length)
                writer.writeString(1, this.job_interview_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteJobInterviewRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.job_interview_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return DeleteJobInterviewRequest.deserialize(bytes);
        }
    }
    _DeleteJobInterviewRequest_one_of_decls = new WeakMap();
    job_interview_service.DeleteJobInterviewRequest = DeleteJobInterviewRequest;
    class DeleteJobInterviewResponse extends pb_1.Message {
        constructor(data) {
            super();
            _DeleteJobInterviewResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _DeleteJobInterviewResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false);
        }
        set success(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new DeleteJobInterviewResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteJobInterviewResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return DeleteJobInterviewResponse.deserialize(bytes);
        }
    }
    _DeleteJobInterviewResponse_one_of_decls = new WeakMap();
    job_interview_service.DeleteJobInterviewResponse = DeleteJobInterviewResponse;
    class InterviewMessageRequest extends pb_1.Message {
        constructor(data) {
            super();
            _InterviewMessageRequest_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _InterviewMessageRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("req" in data && data.req != undefined) {
                    this.req = data.req;
                }
            }
        }
        get req() {
            return pb_1.Message.getWrapperField(this, InterviewMessage, 1);
        }
        set req(value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_req() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data) {
            const message = new InterviewMessageRequest({});
            if (data.req != null) {
                message.req = InterviewMessage.fromObject(data.req);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.req != null) {
                data.req = this.req.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_req)
                writer.writeMessage(1, this.req, () => this.req.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InterviewMessageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.req, () => message.req = InterviewMessage.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return InterviewMessageRequest.deserialize(bytes);
        }
    }
    _InterviewMessageRequest_one_of_decls = new WeakMap();
    job_interview_service.InterviewMessageRequest = InterviewMessageRequest;
    class InterviewMessageResponse extends pb_1.Message {
        constructor(data) {
            super();
            _InterviewMessageResponse_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _InterviewMessageResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("res" in data && data.res != undefined) {
                    this.res = data.res;
                }
            }
        }
        get res() {
            return pb_1.Message.getWrapperField(this, InterviewMessage, 1);
        }
        set res(value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_res() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data) {
            const message = new InterviewMessageResponse({});
            if (data.res != null) {
                message.res = InterviewMessage.fromObject(data.res);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.res != null) {
                data.res = this.res.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_res)
                writer.writeMessage(1, this.res, () => this.res.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InterviewMessageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.res, () => message.res = InterviewMessage.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return InterviewMessageResponse.deserialize(bytes);
        }
    }
    _InterviewMessageResponse_one_of_decls = new WeakMap();
    job_interview_service.InterviewMessageResponse = InterviewMessageResponse;
    class InterviewMessage extends pb_1.Message {
        constructor(data) {
            super();
            _InterviewMessage_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _InterviewMessage_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("job_interview_id" in data && data.job_interview_id != undefined) {
                    this.job_interview_id = data.job_interview_id;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get job_interview_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set job_interview_id(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getWrapperField(this, Message, 2);
        }
        set message(value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data) {
            const message = new InterviewMessage({});
            if (data.job_interview_id != null) {
                message.job_interview_id = data.job_interview_id;
            }
            if (data.message != null) {
                message.message = Message.fromObject(data.message);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.job_interview_id != null) {
                data.job_interview_id = this.job_interview_id;
            }
            if (this.message != null) {
                data.message = this.message.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.job_interview_id.length)
                writer.writeString(1, this.job_interview_id);
            if (this.has_message)
                writer.writeMessage(2, this.message, () => this.message.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InterviewMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.job_interview_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.message, () => message.message = Message.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return InterviewMessage.deserialize(bytes);
        }
    }
    _InterviewMessage_one_of_decls = new WeakMap();
    job_interview_service.InterviewMessage = InterviewMessage;
    class Message extends pb_1.Message {
        constructor(data) {
            super();
            _Message_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _Message_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("contents" in data && data.contents != undefined) {
                    this.contents = data.contents;
                }
                if ("time" in data && data.time != undefined) {
                    this.time = data.time;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set id(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get from() {
            return pb_1.Message.getFieldWithDefault(this, 2, "");
        }
        set from(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get contents() {
            return pb_1.Message.getFieldWithDefault(this, 3, "");
        }
        set contents(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get time() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4);
        }
        set time(value) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_time() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data) {
            const message = new Message({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.contents != null) {
                message.contents = data.contents;
            }
            if (data.time != null) {
                message.time = dependency_1.google.protobuf.Timestamp.fromObject(data.time);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.contents != null) {
                data.contents = this.contents;
            }
            if (this.time != null) {
                data.time = this.time.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.from.length)
                writer.writeString(2, this.from);
            if (this.contents.length)
                writer.writeString(3, this.contents);
            if (this.has_time)
                writer.writeMessage(4, this.time, () => this.time.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.from = reader.readString();
                        break;
                    case 3:
                        message.contents = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.time, () => message.time = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return Message.deserialize(bytes);
        }
    }
    _Message_one_of_decls = new WeakMap();
    job_interview_service.Message = Message;
    class UnimplementedJobInterviewServiceService {
    }
    UnimplementedJobInterviewServiceService.definition = {
        CreateJobInterview: {
            path: "/job_interview_service.JobInterviewService/CreateJobInterview",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => CreateJobInterviewRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => CreateJobInterviewResponse.deserialize(new Uint8Array(bytes))
        },
        ReadJobInterview: {
            path: "/job_interview_service.JobInterviewService/ReadJobInterview",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => ReadJobInterviewRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => ReadJobInterviewResponse.deserialize(new Uint8Array(bytes))
        },
        UpdateJobInterview: {
            path: "/job_interview_service.JobInterviewService/UpdateJobInterview",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => UpdateJobInterviewRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => UpdateJobInterviewResponse.deserialize(new Uint8Array(bytes))
        },
        DeleteJobInterview: {
            path: "/job_interview_service.JobInterviewService/DeleteJobInterview",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => DeleteJobInterviewRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => DeleteJobInterviewResponse.deserialize(new Uint8Array(bytes))
        },
        UnaryConversation: {
            path: "/job_interview_service.JobInterviewService/UnaryConversation",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => InterviewMessageRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => InterviewMessageResponse.deserialize(new Uint8Array(bytes))
        },
        BidirectionalConversation: {
            path: "/job_interview_service.JobInterviewService/BidirectionalConversation",
            requestStream: true,
            responseStream: true,
            requestSerialize: (message) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes) => InterviewMessage.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes) => InterviewMessage.deserialize(new Uint8Array(bytes))
        }
    };
    job_interview_service.UnimplementedJobInterviewServiceService = UnimplementedJobInterviewServiceService;
    class JobInterviewServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedJobInterviewServiceService.definition, "JobInterviewService", {}) {
        constructor(address, credentials, options) {
            super(address, credentials, options);
            this.CreateJobInterview = (message, metadata, options, callback) => {
                return super.CreateJobInterview(message, metadata, options, callback);
            };
            this.ReadJobInterview = (message, metadata, options, callback) => {
                return super.ReadJobInterview(message, metadata, options, callback);
            };
            this.UpdateJobInterview = (message, metadata, options, callback) => {
                return super.UpdateJobInterview(message, metadata, options, callback);
            };
            this.DeleteJobInterview = (message, metadata, options, callback) => {
                return super.DeleteJobInterview(message, metadata, options, callback);
            };
            this.UnaryConversation = (message, metadata, options, callback) => {
                return super.UnaryConversation(message, metadata, options, callback);
            };
            this.BidirectionalConversation = (metadata, options) => {
                return super.BidirectionalConversation(metadata, options);
            };
        }
    }
    job_interview_service.JobInterviewServiceClient = JobInterviewServiceClient;
})(job_interview_service || (exports.job_interview_service = job_interview_service = {}));
