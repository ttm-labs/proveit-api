/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.3
 * source: job_interview_analysis.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace job_interview_analysis_service {
    export class CreateJobInterviewAnalysisRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            job_interview_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("job_interview_id" in data && data.job_interview_id != undefined) {
                    this.job_interview_id = data.job_interview_id;
                }
            }
        }
        get job_interview_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set job_interview_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            job_interview_id?: string;
        }): CreateJobInterviewAnalysisRequest {
            const message = new CreateJobInterviewAnalysisRequest({});
            if (data.job_interview_id != null) {
                message.job_interview_id = data.job_interview_id;
            }
            return message;
        }
        toObject() {
            const data: {
                job_interview_id?: string;
            } = {};
            if (this.job_interview_id != null) {
                data.job_interview_id = this.job_interview_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.job_interview_id.length)
                writer.writeString(1, this.job_interview_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateJobInterviewAnalysisRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateJobInterviewAnalysisRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.job_interview_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateJobInterviewAnalysisRequest {
            return CreateJobInterviewAnalysisRequest.deserialize(bytes);
        }
    }
    export class CreateJobInterviewAnalysisResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            job_interview_analysis_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("job_interview_analysis_id" in data && data.job_interview_analysis_id != undefined) {
                    this.job_interview_analysis_id = data.job_interview_analysis_id;
                }
            }
        }
        get job_interview_analysis_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set job_interview_analysis_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            job_interview_analysis_id?: string;
        }): CreateJobInterviewAnalysisResponse {
            const message = new CreateJobInterviewAnalysisResponse({});
            if (data.job_interview_analysis_id != null) {
                message.job_interview_analysis_id = data.job_interview_analysis_id;
            }
            return message;
        }
        toObject() {
            const data: {
                job_interview_analysis_id?: string;
            } = {};
            if (this.job_interview_analysis_id != null) {
                data.job_interview_analysis_id = this.job_interview_analysis_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.job_interview_analysis_id.length)
                writer.writeString(1, this.job_interview_analysis_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateJobInterviewAnalysisResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateJobInterviewAnalysisResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.job_interview_analysis_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateJobInterviewAnalysisResponse {
            return CreateJobInterviewAnalysisResponse.deserialize(bytes);
        }
    }
    export class ReadJobInterviewAnalysisRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            job_interview_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("job_interview_id" in data && data.job_interview_id != undefined) {
                    this.job_interview_id = data.job_interview_id;
                }
            }
        }
        get job_interview_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set job_interview_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            job_interview_id?: string;
        }): ReadJobInterviewAnalysisRequest {
            const message = new ReadJobInterviewAnalysisRequest({});
            if (data.job_interview_id != null) {
                message.job_interview_id = data.job_interview_id;
            }
            return message;
        }
        toObject() {
            const data: {
                job_interview_id?: string;
            } = {};
            if (this.job_interview_id != null) {
                data.job_interview_id = this.job_interview_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.job_interview_id.length)
                writer.writeString(1, this.job_interview_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadJobInterviewAnalysisRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadJobInterviewAnalysisRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.job_interview_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadJobInterviewAnalysisRequest {
            return ReadJobInterviewAnalysisRequest.deserialize(bytes);
        }
    }
    export class ReadJobInterviewAnalysisResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            analysis?: Analysis;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("analysis" in data && data.analysis != undefined) {
                    this.analysis = data.analysis;
                }
            }
        }
        get analysis() {
            return pb_1.Message.getWrapperField(this, Analysis, 1) as Analysis;
        }
        set analysis(value: Analysis) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_analysis() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            analysis?: ReturnType<typeof Analysis.prototype.toObject>;
        }): ReadJobInterviewAnalysisResponse {
            const message = new ReadJobInterviewAnalysisResponse({});
            if (data.analysis != null) {
                message.analysis = Analysis.fromObject(data.analysis);
            }
            return message;
        }
        toObject() {
            const data: {
                analysis?: ReturnType<typeof Analysis.prototype.toObject>;
            } = {};
            if (this.analysis != null) {
                data.analysis = this.analysis.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_analysis)
                writer.writeMessage(1, this.analysis, () => this.analysis.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadJobInterviewAnalysisResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadJobInterviewAnalysisResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.analysis, () => message.analysis = Analysis.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadJobInterviewAnalysisResponse {
            return ReadJobInterviewAnalysisResponse.deserialize(bytes);
        }
    }
    export class UpdateJobInterviewAnalysisRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): UpdateJobInterviewAnalysisRequest {
            const message = new UpdateJobInterviewAnalysisRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateJobInterviewAnalysisRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateJobInterviewAnalysisRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateJobInterviewAnalysisRequest {
            return UpdateJobInterviewAnalysisRequest.deserialize(bytes);
        }
    }
    export class UpdateJobInterviewAnalysisResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): UpdateJobInterviewAnalysisResponse {
            const message = new UpdateJobInterviewAnalysisResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateJobInterviewAnalysisResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateJobInterviewAnalysisResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateJobInterviewAnalysisResponse {
            return UpdateJobInterviewAnalysisResponse.deserialize(bytes);
        }
    }
    export class DeleteJobInterviewAnalysisRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeleteJobInterviewAnalysisRequest {
            const message = new DeleteJobInterviewAnalysisRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteJobInterviewAnalysisRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteJobInterviewAnalysisRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteJobInterviewAnalysisRequest {
            return DeleteJobInterviewAnalysisRequest.deserialize(bytes);
        }
    }
    export class DeleteJobInterviewAnalysisResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeleteJobInterviewAnalysisResponse {
            const message = new DeleteJobInterviewAnalysisResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteJobInterviewAnalysisResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteJobInterviewAnalysisResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteJobInterviewAnalysisResponse {
            return DeleteJobInterviewAnalysisResponse.deserialize(bytes);
        }
    }
    export class GetAnalysesForInterviewsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            job_application_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("job_application_id" in data && data.job_application_id != undefined) {
                    this.job_application_id = data.job_application_id;
                }
            }
        }
        get job_application_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set job_application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            job_application_id?: string;
        }): GetAnalysesForInterviewsRequest {
            const message = new GetAnalysesForInterviewsRequest({});
            if (data.job_application_id != null) {
                message.job_application_id = data.job_application_id;
            }
            return message;
        }
        toObject() {
            const data: {
                job_application_id?: string;
            } = {};
            if (this.job_application_id != null) {
                data.job_application_id = this.job_application_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.job_application_id.length)
                writer.writeString(1, this.job_application_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAnalysesForInterviewsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAnalysesForInterviewsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.job_application_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAnalysesForInterviewsRequest {
            return GetAnalysesForInterviewsRequest.deserialize(bytes);
        }
    }
    export class GetAnalysesForInterviewsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            analyses?: AnalysisForInterview[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("analyses" in data && data.analyses != undefined) {
                    this.analyses = data.analyses;
                }
            }
        }
        get analyses() {
            return pb_1.Message.getRepeatedWrapperField(this, AnalysisForInterview, 1) as AnalysisForInterview[];
        }
        set analyses(value: AnalysisForInterview[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            analyses?: ReturnType<typeof AnalysisForInterview.prototype.toObject>[];
        }): GetAnalysesForInterviewsResponse {
            const message = new GetAnalysesForInterviewsResponse({});
            if (data.analyses != null) {
                message.analyses = data.analyses.map(item => AnalysisForInterview.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                analyses?: ReturnType<typeof AnalysisForInterview.prototype.toObject>[];
            } = {};
            if (this.analyses != null) {
                data.analyses = this.analyses.map((item: AnalysisForInterview) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.analyses.length)
                writer.writeRepeatedMessage(1, this.analyses, (item: AnalysisForInterview) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAnalysesForInterviewsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAnalysesForInterviewsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.analyses, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AnalysisForInterview.deserialize(reader), AnalysisForInterview));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAnalysesForInterviewsResponse {
            return GetAnalysesForInterviewsResponse.deserialize(bytes);
        }
    }
    export class GenerateAnalysesForInterviewsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            job_application_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("job_application_id" in data && data.job_application_id != undefined) {
                    this.job_application_id = data.job_application_id;
                }
            }
        }
        get job_application_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set job_application_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            job_application_id?: string;
        }): GenerateAnalysesForInterviewsRequest {
            const message = new GenerateAnalysesForInterviewsRequest({});
            if (data.job_application_id != null) {
                message.job_application_id = data.job_application_id;
            }
            return message;
        }
        toObject() {
            const data: {
                job_application_id?: string;
            } = {};
            if (this.job_application_id != null) {
                data.job_application_id = this.job_application_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.job_application_id.length)
                writer.writeString(1, this.job_application_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenerateAnalysesForInterviewsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenerateAnalysesForInterviewsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.job_application_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenerateAnalysesForInterviewsRequest {
            return GenerateAnalysesForInterviewsRequest.deserialize(bytes);
        }
    }
    export class GenerateAnalysesForInterviewsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GenerateAnalysesForInterviewsResponse {
            const message = new GenerateAnalysesForInterviewsResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenerateAnalysesForInterviewsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenerateAnalysesForInterviewsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenerateAnalysesForInterviewsResponse {
            return GenerateAnalysesForInterviewsResponse.deserialize(bytes);
        }
    }
    export class AnalysisForInterview extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            job_interview_id?: string;
            analysis?: Analysis;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("job_interview_id" in data && data.job_interview_id != undefined) {
                    this.job_interview_id = data.job_interview_id;
                }
                if ("analysis" in data && data.analysis != undefined) {
                    this.analysis = data.analysis;
                }
            }
        }
        get job_interview_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set job_interview_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get analysis() {
            return pb_1.Message.getWrapperField(this, Analysis, 2) as Analysis;
        }
        set analysis(value: Analysis) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_analysis() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            job_interview_id?: string;
            analysis?: ReturnType<typeof Analysis.prototype.toObject>;
        }): AnalysisForInterview {
            const message = new AnalysisForInterview({});
            if (data.job_interview_id != null) {
                message.job_interview_id = data.job_interview_id;
            }
            if (data.analysis != null) {
                message.analysis = Analysis.fromObject(data.analysis);
            }
            return message;
        }
        toObject() {
            const data: {
                job_interview_id?: string;
                analysis?: ReturnType<typeof Analysis.prototype.toObject>;
            } = {};
            if (this.job_interview_id != null) {
                data.job_interview_id = this.job_interview_id;
            }
            if (this.analysis != null) {
                data.analysis = this.analysis.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.job_interview_id.length)
                writer.writeString(1, this.job_interview_id);
            if (this.has_analysis)
                writer.writeMessage(2, this.analysis, () => this.analysis.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AnalysisForInterview {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AnalysisForInterview();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.job_interview_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.analysis, () => message.analysis = Analysis.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AnalysisForInterview {
            return AnalysisForInterview.deserialize(bytes);
        }
    }
    export class Analysis extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            last_message_id?: string;
            last_message_ts?: dependency_1.google.protobuf.Timestamp;
            analysis?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("last_message_id" in data && data.last_message_id != undefined) {
                    this.last_message_id = data.last_message_id;
                }
                if ("last_message_ts" in data && data.last_message_ts != undefined) {
                    this.last_message_ts = data.last_message_ts;
                }
                if ("analysis" in data && data.analysis != undefined) {
                    this.analysis = data.analysis;
                }
            }
        }
        get last_message_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set last_message_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get last_message_ts() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 2) as dependency_1.google.protobuf.Timestamp;
        }
        set last_message_ts(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_last_message_ts() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get analysis() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set analysis(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            last_message_id?: string;
            last_message_ts?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            analysis?: string;
        }): Analysis {
            const message = new Analysis({});
            if (data.last_message_id != null) {
                message.last_message_id = data.last_message_id;
            }
            if (data.last_message_ts != null) {
                message.last_message_ts = dependency_1.google.protobuf.Timestamp.fromObject(data.last_message_ts);
            }
            if (data.analysis != null) {
                message.analysis = data.analysis;
            }
            return message;
        }
        toObject() {
            const data: {
                last_message_id?: string;
                last_message_ts?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                analysis?: string;
            } = {};
            if (this.last_message_id != null) {
                data.last_message_id = this.last_message_id;
            }
            if (this.last_message_ts != null) {
                data.last_message_ts = this.last_message_ts.toObject();
            }
            if (this.analysis != null) {
                data.analysis = this.analysis;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.last_message_id.length)
                writer.writeString(1, this.last_message_id);
            if (this.has_last_message_ts)
                writer.writeMessage(2, this.last_message_ts, () => this.last_message_ts.serialize(writer));
            if (this.analysis.length)
                writer.writeString(3, this.analysis);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Analysis {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Analysis();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.last_message_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.last_message_ts, () => message.last_message_ts = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 3:
                        message.analysis = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Analysis {
            return Analysis.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedJobInterviewAnalysisServiceService {
        static definition = {
            CreateJobInterviewAnalysis: {
                path: "/job_interview_analysis_service.JobInterviewAnalysisService/CreateJobInterviewAnalysis",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateJobInterviewAnalysisRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateJobInterviewAnalysisRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateJobInterviewAnalysisResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateJobInterviewAnalysisResponse.deserialize(new Uint8Array(bytes))
            },
            ReadJobInterviewAnalysis: {
                path: "/job_interview_analysis_service.JobInterviewAnalysisService/ReadJobInterviewAnalysis",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReadJobInterviewAnalysisRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReadJobInterviewAnalysisRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReadJobInterviewAnalysisResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReadJobInterviewAnalysisResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateJobInterviewAnalysis: {
                path: "/job_interview_analysis_service.JobInterviewAnalysisService/UpdateJobInterviewAnalysis",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateJobInterviewAnalysisRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateJobInterviewAnalysisRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateJobInterviewAnalysisResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateJobInterviewAnalysisResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteJobInterviewAnalysis: {
                path: "/job_interview_analysis_service.JobInterviewAnalysisService/DeleteJobInterviewAnalysis",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteJobInterviewAnalysisRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteJobInterviewAnalysisRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteJobInterviewAnalysisResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteJobInterviewAnalysisResponse.deserialize(new Uint8Array(bytes))
            },
            GenerateAnalysesForInterviews: {
                path: "/job_interview_analysis_service.JobInterviewAnalysisService/GenerateAnalysesForInterviews",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GenerateAnalysesForInterviewsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GenerateAnalysesForInterviewsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GenerateAnalysesForInterviewsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GenerateAnalysesForInterviewsResponse.deserialize(new Uint8Array(bytes))
            },
            GetAnalysesForInterviews: {
                path: "/job_interview_analysis_service.JobInterviewAnalysisService/GetAnalysesForInterviews",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAnalysesForInterviewsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAnalysesForInterviewsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAnalysesForInterviewsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAnalysesForInterviewsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateJobInterviewAnalysis(call: grpc_1.ServerUnaryCall<CreateJobInterviewAnalysisRequest, CreateJobInterviewAnalysisResponse>, callback: grpc_1.sendUnaryData<CreateJobInterviewAnalysisResponse>): void;
        abstract ReadJobInterviewAnalysis(call: grpc_1.ServerUnaryCall<ReadJobInterviewAnalysisRequest, ReadJobInterviewAnalysisResponse>, callback: grpc_1.sendUnaryData<ReadJobInterviewAnalysisResponse>): void;
        abstract UpdateJobInterviewAnalysis(call: grpc_1.ServerUnaryCall<UpdateJobInterviewAnalysisRequest, UpdateJobInterviewAnalysisResponse>, callback: grpc_1.sendUnaryData<UpdateJobInterviewAnalysisResponse>): void;
        abstract DeleteJobInterviewAnalysis(call: grpc_1.ServerUnaryCall<DeleteJobInterviewAnalysisRequest, DeleteJobInterviewAnalysisResponse>, callback: grpc_1.sendUnaryData<DeleteJobInterviewAnalysisResponse>): void;
        abstract GenerateAnalysesForInterviews(call: grpc_1.ServerUnaryCall<GenerateAnalysesForInterviewsRequest, GenerateAnalysesForInterviewsResponse>, callback: grpc_1.sendUnaryData<GenerateAnalysesForInterviewsResponse>): void;
        abstract GetAnalysesForInterviews(call: grpc_1.ServerUnaryCall<GetAnalysesForInterviewsRequest, GetAnalysesForInterviewsResponse>, callback: grpc_1.sendUnaryData<GetAnalysesForInterviewsResponse>): void;
    }
    export class JobInterviewAnalysisServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedJobInterviewAnalysisServiceService.definition, "JobInterviewAnalysisService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateJobInterviewAnalysis: GrpcUnaryServiceInterface<CreateJobInterviewAnalysisRequest, CreateJobInterviewAnalysisResponse> = (message: CreateJobInterviewAnalysisRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateJobInterviewAnalysisResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateJobInterviewAnalysisResponse>, callback?: grpc_1.requestCallback<CreateJobInterviewAnalysisResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateJobInterviewAnalysis(message, metadata, options, callback);
        };
        ReadJobInterviewAnalysis: GrpcUnaryServiceInterface<ReadJobInterviewAnalysisRequest, ReadJobInterviewAnalysisResponse> = (message: ReadJobInterviewAnalysisRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ReadJobInterviewAnalysisResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ReadJobInterviewAnalysisResponse>, callback?: grpc_1.requestCallback<ReadJobInterviewAnalysisResponse>): grpc_1.ClientUnaryCall => {
            return super.ReadJobInterviewAnalysis(message, metadata, options, callback);
        };
        UpdateJobInterviewAnalysis: GrpcUnaryServiceInterface<UpdateJobInterviewAnalysisRequest, UpdateJobInterviewAnalysisResponse> = (message: UpdateJobInterviewAnalysisRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateJobInterviewAnalysisResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateJobInterviewAnalysisResponse>, callback?: grpc_1.requestCallback<UpdateJobInterviewAnalysisResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateJobInterviewAnalysis(message, metadata, options, callback);
        };
        DeleteJobInterviewAnalysis: GrpcUnaryServiceInterface<DeleteJobInterviewAnalysisRequest, DeleteJobInterviewAnalysisResponse> = (message: DeleteJobInterviewAnalysisRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteJobInterviewAnalysisResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteJobInterviewAnalysisResponse>, callback?: grpc_1.requestCallback<DeleteJobInterviewAnalysisResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteJobInterviewAnalysis(message, metadata, options, callback);
        };
        GenerateAnalysesForInterviews: GrpcUnaryServiceInterface<GenerateAnalysesForInterviewsRequest, GenerateAnalysesForInterviewsResponse> = (message: GenerateAnalysesForInterviewsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GenerateAnalysesForInterviewsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GenerateAnalysesForInterviewsResponse>, callback?: grpc_1.requestCallback<GenerateAnalysesForInterviewsResponse>): grpc_1.ClientUnaryCall => {
            return super.GenerateAnalysesForInterviews(message, metadata, options, callback);
        };
        GetAnalysesForInterviews: GrpcUnaryServiceInterface<GetAnalysesForInterviewsRequest, GetAnalysesForInterviewsResponse> = (message: GetAnalysesForInterviewsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAnalysesForInterviewsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAnalysesForInterviewsResponse>, callback?: grpc_1.requestCallback<GetAnalysesForInterviewsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAnalysesForInterviews(message, metadata, options, callback);
        };
    }
}
