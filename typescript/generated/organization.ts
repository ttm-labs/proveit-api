/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.3
 * source: organization.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace organization_service {
    export class CreateOrganizationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): CreateOrganizationRequest {
            const message = new CreateOrganizationRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateOrganizationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateOrganizationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateOrganizationRequest {
            return CreateOrganizationRequest.deserialize(bytes);
        }
    }
    export class CreateOrganizationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            organization_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("organization_id" in data && data.organization_id != undefined) {
                    this.organization_id = data.organization_id;
                }
            }
        }
        get organization_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set organization_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            organization_id?: string;
        }): CreateOrganizationResponse {
            const message = new CreateOrganizationResponse({});
            if (data.organization_id != null) {
                message.organization_id = data.organization_id;
            }
            return message;
        }
        toObject() {
            const data: {
                organization_id?: string;
            } = {};
            if (this.organization_id != null) {
                data.organization_id = this.organization_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.organization_id.length)
                writer.writeString(1, this.organization_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateOrganizationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateOrganizationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.organization_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateOrganizationResponse {
            return CreateOrganizationResponse.deserialize(bytes);
        }
    }
    export class ReadOrganizationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            organization_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("organization_id" in data && data.organization_id != undefined) {
                    this.organization_id = data.organization_id;
                }
            }
        }
        get organization_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set organization_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            organization_id?: string;
        }): ReadOrganizationRequest {
            const message = new ReadOrganizationRequest({});
            if (data.organization_id != null) {
                message.organization_id = data.organization_id;
            }
            return message;
        }
        toObject() {
            const data: {
                organization_id?: string;
            } = {};
            if (this.organization_id != null) {
                data.organization_id = this.organization_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.organization_id.length)
                writer.writeString(1, this.organization_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadOrganizationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadOrganizationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.organization_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadOrganizationRequest {
            return ReadOrganizationRequest.deserialize(bytes);
        }
    }
    export class ReadOrganizationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            membership?: Membership;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("membership" in data && data.membership != undefined) {
                    this.membership = data.membership;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get membership() {
            return pb_1.Message.getWrapperField(this, Membership, 2) as Membership;
        }
        set membership(value: Membership) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_membership() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            name?: string;
            membership?: ReturnType<typeof Membership.prototype.toObject>;
        }): ReadOrganizationResponse {
            const message = new ReadOrganizationResponse({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.membership != null) {
                message.membership = Membership.fromObject(data.membership);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                membership?: ReturnType<typeof Membership.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.membership != null) {
                data.membership = this.membership.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_membership)
                writer.writeMessage(2, this.membership, () => this.membership.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadOrganizationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadOrganizationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.membership, () => message.membership = Membership.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadOrganizationResponse {
            return ReadOrganizationResponse.deserialize(bytes);
        }
    }
    export class ReadOrganizationByQueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ReadOrganizationByQueryRequest {
            const message = new ReadOrganizationByQueryRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadOrganizationByQueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadOrganizationByQueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadOrganizationByQueryRequest {
            return ReadOrganizationByQueryRequest.deserialize(bytes);
        }
    }
    export class ReadOrganizationByQueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ReadOrganizationByQueryResponse {
            const message = new ReadOrganizationByQueryResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadOrganizationByQueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadOrganizationByQueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadOrganizationByQueryResponse {
            return ReadOrganizationByQueryResponse.deserialize(bytes);
        }
    }
    export class UpdateOrganizationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): UpdateOrganizationRequest {
            const message = new UpdateOrganizationRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateOrganizationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateOrganizationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateOrganizationRequest {
            return UpdateOrganizationRequest.deserialize(bytes);
        }
    }
    export class UpdateOrganizationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): UpdateOrganizationResponse {
            const message = new UpdateOrganizationResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateOrganizationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateOrganizationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateOrganizationResponse {
            return UpdateOrganizationResponse.deserialize(bytes);
        }
    }
    export class DeleteOrganizationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeleteOrganizationRequest {
            const message = new DeleteOrganizationRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteOrganizationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteOrganizationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteOrganizationRequest {
            return DeleteOrganizationRequest.deserialize(bytes);
        }
    }
    export class DeleteOrganizationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeleteOrganizationResponse {
            const message = new DeleteOrganizationResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteOrganizationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteOrganizationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteOrganizationResponse {
            return DeleteOrganizationResponse.deserialize(bytes);
        }
    }
    export class AddMemberRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            organization_id?: string;
            user_email?: string;
            user_authorization?: UserAuthorization;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("organization_id" in data && data.organization_id != undefined) {
                    this.organization_id = data.organization_id;
                }
                if ("user_email" in data && data.user_email != undefined) {
                    this.user_email = data.user_email;
                }
                if ("user_authorization" in data && data.user_authorization != undefined) {
                    this.user_authorization = data.user_authorization;
                }
            }
        }
        get organization_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set organization_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get user_authorization() {
            return pb_1.Message.getWrapperField(this, UserAuthorization, 3) as UserAuthorization;
        }
        set user_authorization(value: UserAuthorization) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_user_authorization() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            organization_id?: string;
            user_email?: string;
            user_authorization?: ReturnType<typeof UserAuthorization.prototype.toObject>;
        }): AddMemberRequest {
            const message = new AddMemberRequest({});
            if (data.organization_id != null) {
                message.organization_id = data.organization_id;
            }
            if (data.user_email != null) {
                message.user_email = data.user_email;
            }
            if (data.user_authorization != null) {
                message.user_authorization = UserAuthorization.fromObject(data.user_authorization);
            }
            return message;
        }
        toObject() {
            const data: {
                organization_id?: string;
                user_email?: string;
                user_authorization?: ReturnType<typeof UserAuthorization.prototype.toObject>;
            } = {};
            if (this.organization_id != null) {
                data.organization_id = this.organization_id;
            }
            if (this.user_email != null) {
                data.user_email = this.user_email;
            }
            if (this.user_authorization != null) {
                data.user_authorization = this.user_authorization.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.organization_id.length)
                writer.writeString(1, this.organization_id);
            if (this.user_email.length)
                writer.writeString(2, this.user_email);
            if (this.has_user_authorization)
                writer.writeMessage(3, this.user_authorization, () => this.user_authorization.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddMemberRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddMemberRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.organization_id = reader.readString();
                        break;
                    case 2:
                        message.user_email = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.user_authorization, () => message.user_authorization = UserAuthorization.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddMemberRequest {
            return AddMemberRequest.deserialize(bytes);
        }
    }
    export class AddMemberResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            success?: boolean;
        }): AddMemberResponse {
            const message = new AddMemberResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddMemberResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddMemberResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddMemberResponse {
            return AddMemberResponse.deserialize(bytes);
        }
    }
    export class Membership extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            users?: User[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
            }
        }
        get users() {
            return pb_1.Message.getRepeatedWrapperField(this, User, 1) as User[];
        }
        set users(value: User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            users?: ReturnType<typeof User.prototype.toObject>[];
        }): Membership {
            const message = new Membership({});
            if (data.users != null) {
                message.users = data.users.map(item => User.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                users?: ReturnType<typeof User.prototype.toObject>[];
            } = {};
            if (this.users != null) {
                data.users = this.users.map((item: User) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.users.length)
                writer.writeRepeatedMessage(1, this.users, (item: User) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Membership {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Membership();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 1, User.deserialize(reader), User));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Membership {
            return Membership.deserialize(bytes);
        }
    }
    export class User extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_info?: UserInfo;
            user_authorization?: UserAuthorization;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_info" in data && data.user_info != undefined) {
                    this.user_info = data.user_info;
                }
                if ("user_authorization" in data && data.user_authorization != undefined) {
                    this.user_authorization = data.user_authorization;
                }
            }
        }
        get user_info() {
            return pb_1.Message.getWrapperField(this, UserInfo, 1) as UserInfo;
        }
        set user_info(value: UserInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user_info() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get user_authorization() {
            return pb_1.Message.getWrapperField(this, UserAuthorization, 2) as UserAuthorization;
        }
        set user_authorization(value: UserAuthorization) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_user_authorization() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            user_info?: ReturnType<typeof UserInfo.prototype.toObject>;
            user_authorization?: ReturnType<typeof UserAuthorization.prototype.toObject>;
        }): User {
            const message = new User({});
            if (data.user_info != null) {
                message.user_info = UserInfo.fromObject(data.user_info);
            }
            if (data.user_authorization != null) {
                message.user_authorization = UserAuthorization.fromObject(data.user_authorization);
            }
            return message;
        }
        toObject() {
            const data: {
                user_info?: ReturnType<typeof UserInfo.prototype.toObject>;
                user_authorization?: ReturnType<typeof UserAuthorization.prototype.toObject>;
            } = {};
            if (this.user_info != null) {
                data.user_info = this.user_info.toObject();
            }
            if (this.user_authorization != null) {
                data.user_authorization = this.user_authorization.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user_info)
                writer.writeMessage(1, this.user_info, () => this.user_info.serialize(writer));
            if (this.has_user_authorization)
                writer.writeMessage(2, this.user_authorization, () => this.user_authorization.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user_info, () => message.user_info = UserInfo.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.user_authorization, () => message.user_authorization = UserAuthorization.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): User {
            return User.deserialize(bytes);
        }
    }
    export class UserInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: string;
            email?: string;
            first_name?: string;
            last_name?: string;
            ts_last_login?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("first_name" in data && data.first_name != undefined) {
                    this.first_name = data.first_name;
                }
                if ("last_name" in data && data.last_name != undefined) {
                    this.last_name = data.last_name;
                }
                if ("ts_last_login" in data && data.ts_last_login != undefined) {
                    this.ts_last_login = data.ts_last_login;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get first_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set first_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get last_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set last_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get ts_last_login() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set ts_last_login(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_ts_last_login() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            user_id?: string;
            email?: string;
            first_name?: string;
            last_name?: string;
            ts_last_login?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): UserInfo {
            const message = new UserInfo({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.first_name != null) {
                message.first_name = data.first_name;
            }
            if (data.last_name != null) {
                message.last_name = data.last_name;
            }
            if (data.ts_last_login != null) {
                message.ts_last_login = dependency_1.google.protobuf.Timestamp.fromObject(data.ts_last_login);
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: string;
                email?: string;
                first_name?: string;
                last_name?: string;
                ts_last_login?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.first_name != null) {
                data.first_name = this.first_name;
            }
            if (this.last_name != null) {
                data.last_name = this.last_name;
            }
            if (this.ts_last_login != null) {
                data.ts_last_login = this.ts_last_login.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.email.length)
                writer.writeString(2, this.email);
            if (this.first_name.length)
                writer.writeString(3, this.first_name);
            if (this.last_name.length)
                writer.writeString(4, this.last_name);
            if (this.has_ts_last_login)
                writer.writeMessage(5, this.ts_last_login, () => this.ts_last_login.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    case 3:
                        message.first_name = reader.readString();
                        break;
                    case 4:
                        message.last_name = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.ts_last_login, () => message.ts_last_login = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserInfo {
            return UserInfo.deserialize(bytes);
        }
    }
    export class UserAuthorization extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            resource_type?: string;
            resource_id?: string;
            role?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("resource_type" in data && data.resource_type != undefined) {
                    this.resource_type = data.resource_type;
                }
                if ("resource_id" in data && data.resource_id != undefined) {
                    this.resource_id = data.resource_id;
                }
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
            }
        }
        get resource_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set resource_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get resource_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set resource_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set role(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            resource_type?: string;
            resource_id?: string;
            role?: string;
        }): UserAuthorization {
            const message = new UserAuthorization({});
            if (data.resource_type != null) {
                message.resource_type = data.resource_type;
            }
            if (data.resource_id != null) {
                message.resource_id = data.resource_id;
            }
            if (data.role != null) {
                message.role = data.role;
            }
            return message;
        }
        toObject() {
            const data: {
                resource_type?: string;
                resource_id?: string;
                role?: string;
            } = {};
            if (this.resource_type != null) {
                data.resource_type = this.resource_type;
            }
            if (this.resource_id != null) {
                data.resource_id = this.resource_id;
            }
            if (this.role != null) {
                data.role = this.role;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.resource_type.length)
                writer.writeString(1, this.resource_type);
            if (this.resource_id.length)
                writer.writeString(2, this.resource_id);
            if (this.role.length)
                writer.writeString(3, this.role);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserAuthorization {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserAuthorization();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.resource_type = reader.readString();
                        break;
                    case 2:
                        message.resource_id = reader.readString();
                        break;
                    case 3:
                        message.role = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserAuthorization {
            return UserAuthorization.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedOrganizationServiceService {
        static definition = {
            CreateOrganization: {
                path: "/organization_service.OrganizationService/CreateOrganization",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateOrganizationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateOrganizationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateOrganizationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateOrganizationResponse.deserialize(new Uint8Array(bytes))
            },
            ReadOrganization: {
                path: "/organization_service.OrganizationService/ReadOrganization",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReadOrganizationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReadOrganizationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReadOrganizationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReadOrganizationResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateOrganization: {
                path: "/organization_service.OrganizationService/UpdateOrganization",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateOrganizationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateOrganizationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateOrganizationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateOrganizationResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteOrganization: {
                path: "/organization_service.OrganizationService/DeleteOrganization",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteOrganizationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteOrganizationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteOrganizationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteOrganizationResponse.deserialize(new Uint8Array(bytes))
            },
            AddMember: {
                path: "/organization_service.OrganizationService/AddMember",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddMemberRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddMemberRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AddMemberResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AddMemberResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateOrganization(call: grpc_1.ServerUnaryCall<CreateOrganizationRequest, CreateOrganizationResponse>, callback: grpc_1.sendUnaryData<CreateOrganizationResponse>): void;
        abstract ReadOrganization(call: grpc_1.ServerUnaryCall<ReadOrganizationRequest, ReadOrganizationResponse>, callback: grpc_1.sendUnaryData<ReadOrganizationResponse>): void;
        abstract UpdateOrganization(call: grpc_1.ServerUnaryCall<UpdateOrganizationRequest, UpdateOrganizationResponse>, callback: grpc_1.sendUnaryData<UpdateOrganizationResponse>): void;
        abstract DeleteOrganization(call: grpc_1.ServerUnaryCall<DeleteOrganizationRequest, DeleteOrganizationResponse>, callback: grpc_1.sendUnaryData<DeleteOrganizationResponse>): void;
        abstract AddMember(call: grpc_1.ServerUnaryCall<AddMemberRequest, AddMemberResponse>, callback: grpc_1.sendUnaryData<AddMemberResponse>): void;
    }
    export class OrganizationServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedOrganizationServiceService.definition, "OrganizationService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateOrganization: GrpcUnaryServiceInterface<CreateOrganizationRequest, CreateOrganizationResponse> = (message: CreateOrganizationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateOrganizationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateOrganizationResponse>, callback?: grpc_1.requestCallback<CreateOrganizationResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateOrganization(message, metadata, options, callback);
        };
        ReadOrganization: GrpcUnaryServiceInterface<ReadOrganizationRequest, ReadOrganizationResponse> = (message: ReadOrganizationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ReadOrganizationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ReadOrganizationResponse>, callback?: grpc_1.requestCallback<ReadOrganizationResponse>): grpc_1.ClientUnaryCall => {
            return super.ReadOrganization(message, metadata, options, callback);
        };
        UpdateOrganization: GrpcUnaryServiceInterface<UpdateOrganizationRequest, UpdateOrganizationResponse> = (message: UpdateOrganizationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateOrganizationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateOrganizationResponse>, callback?: grpc_1.requestCallback<UpdateOrganizationResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateOrganization(message, metadata, options, callback);
        };
        DeleteOrganization: GrpcUnaryServiceInterface<DeleteOrganizationRequest, DeleteOrganizationResponse> = (message: DeleteOrganizationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteOrganizationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteOrganizationResponse>, callback?: grpc_1.requestCallback<DeleteOrganizationResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteOrganization(message, metadata, options, callback);
        };
        AddMember: GrpcUnaryServiceInterface<AddMemberRequest, AddMemberResponse> = (message: AddMemberRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AddMemberResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AddMemberResponse>, callback?: grpc_1.requestCallback<AddMemberResponse>): grpc_1.ClientUnaryCall => {
            return super.AddMember(message, metadata, options, callback);
        };
    }
}
