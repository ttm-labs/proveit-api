/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.3
 * source: organization.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace job_posting_service {
    export class CreateOrganizationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            admin_user_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("admin_user_id" in data && data.admin_user_id != undefined) {
                    this.admin_user_id = data.admin_user_id;
                }
            }
        }
        get admin_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set admin_user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            admin_user_id?: string;
        }): CreateOrganizationRequest {
            const message = new CreateOrganizationRequest({});
            if (data.admin_user_id != null) {
                message.admin_user_id = data.admin_user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                admin_user_id?: string;
            } = {};
            if (this.admin_user_id != null) {
                data.admin_user_id = this.admin_user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.admin_user_id.length)
                writer.writeString(1, this.admin_user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateOrganizationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateOrganizationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.admin_user_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateOrganizationRequest {
            return CreateOrganizationRequest.deserialize(bytes);
        }
    }
    export class CreateOrganizationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            organization_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("organization_id" in data && data.organization_id != undefined) {
                    this.organization_id = data.organization_id;
                }
            }
        }
        get organization_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set organization_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            organization_id?: string;
        }): CreateOrganizationResponse {
            const message = new CreateOrganizationResponse({});
            if (data.organization_id != null) {
                message.organization_id = data.organization_id;
            }
            return message;
        }
        toObject() {
            const data: {
                organization_id?: string;
            } = {};
            if (this.organization_id != null) {
                data.organization_id = this.organization_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.organization_id.length)
                writer.writeString(1, this.organization_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateOrganizationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateOrganizationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.organization_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateOrganizationResponse {
            return CreateOrganizationResponse.deserialize(bytes);
        }
    }
    export class ReadOrganizationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ReadOrganizationRequest {
            const message = new ReadOrganizationRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadOrganizationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadOrganizationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadOrganizationRequest {
            return ReadOrganizationRequest.deserialize(bytes);
        }
    }
    export class ReadOrganizationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ReadOrganizationResponse {
            const message = new ReadOrganizationResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadOrganizationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadOrganizationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadOrganizationResponse {
            return ReadOrganizationResponse.deserialize(bytes);
        }
    }
    export class ReadOrganizationByQueryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ReadOrganizationByQueryRequest {
            const message = new ReadOrganizationByQueryRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadOrganizationByQueryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadOrganizationByQueryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadOrganizationByQueryRequest {
            return ReadOrganizationByQueryRequest.deserialize(bytes);
        }
    }
    export class ReadOrganizationByQueryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ReadOrganizationByQueryResponse {
            const message = new ReadOrganizationByQueryResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadOrganizationByQueryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadOrganizationByQueryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadOrganizationByQueryResponse {
            return ReadOrganizationByQueryResponse.deserialize(bytes);
        }
    }
    export class UpdateOrganizationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): UpdateOrganizationRequest {
            const message = new UpdateOrganizationRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateOrganizationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateOrganizationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateOrganizationRequest {
            return UpdateOrganizationRequest.deserialize(bytes);
        }
    }
    export class UpdateOrganizationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): UpdateOrganizationResponse {
            const message = new UpdateOrganizationResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateOrganizationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateOrganizationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateOrganizationResponse {
            return UpdateOrganizationResponse.deserialize(bytes);
        }
    }
    export class DeleteOrganizationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeleteOrganizationRequest {
            const message = new DeleteOrganizationRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteOrganizationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteOrganizationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteOrganizationRequest {
            return DeleteOrganizationRequest.deserialize(bytes);
        }
    }
    export class DeleteOrganizationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeleteOrganizationResponse {
            const message = new DeleteOrganizationResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteOrganizationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteOrganizationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteOrganizationResponse {
            return DeleteOrganizationResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedOrganizationServiceService {
        static definition = {
            CreateOrganization: {
                path: "/job_posting_service.OrganizationService/CreateOrganization",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateOrganizationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateOrganizationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateOrganizationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateOrganizationResponse.deserialize(new Uint8Array(bytes))
            },
            ReadOrganization: {
                path: "/job_posting_service.OrganizationService/ReadOrganization",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReadOrganizationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReadOrganizationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReadOrganizationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReadOrganizationResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateOrganization: {
                path: "/job_posting_service.OrganizationService/UpdateOrganization",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateOrganizationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateOrganizationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateOrganizationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateOrganizationResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteOrganization: {
                path: "/job_posting_service.OrganizationService/DeleteOrganization",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteOrganizationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteOrganizationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteOrganizationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteOrganizationResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateOrganization(call: grpc_1.ServerUnaryCall<CreateOrganizationRequest, CreateOrganizationResponse>, callback: grpc_1.sendUnaryData<CreateOrganizationResponse>): void;
        abstract ReadOrganization(call: grpc_1.ServerUnaryCall<ReadOrganizationRequest, ReadOrganizationResponse>, callback: grpc_1.sendUnaryData<ReadOrganizationResponse>): void;
        abstract UpdateOrganization(call: grpc_1.ServerUnaryCall<UpdateOrganizationRequest, UpdateOrganizationResponse>, callback: grpc_1.sendUnaryData<UpdateOrganizationResponse>): void;
        abstract DeleteOrganization(call: grpc_1.ServerUnaryCall<DeleteOrganizationRequest, DeleteOrganizationResponse>, callback: grpc_1.sendUnaryData<DeleteOrganizationResponse>): void;
    }
    export class OrganizationServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedOrganizationServiceService.definition, "OrganizationService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateOrganization: GrpcUnaryServiceInterface<CreateOrganizationRequest, CreateOrganizationResponse> = (message: CreateOrganizationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateOrganizationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateOrganizationResponse>, callback?: grpc_1.requestCallback<CreateOrganizationResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateOrganization(message, metadata, options, callback);
        };
        ReadOrganization: GrpcUnaryServiceInterface<ReadOrganizationRequest, ReadOrganizationResponse> = (message: ReadOrganizationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ReadOrganizationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ReadOrganizationResponse>, callback?: grpc_1.requestCallback<ReadOrganizationResponse>): grpc_1.ClientUnaryCall => {
            return super.ReadOrganization(message, metadata, options, callback);
        };
        UpdateOrganization: GrpcUnaryServiceInterface<UpdateOrganizationRequest, UpdateOrganizationResponse> = (message: UpdateOrganizationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateOrganizationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateOrganizationResponse>, callback?: grpc_1.requestCallback<UpdateOrganizationResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateOrganization(message, metadata, options, callback);
        };
        DeleteOrganization: GrpcUnaryServiceInterface<DeleteOrganizationRequest, DeleteOrganizationResponse> = (message: DeleteOrganizationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteOrganizationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteOrganizationResponse>, callback?: grpc_1.requestCallback<DeleteOrganizationResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteOrganization(message, metadata, options, callback);
        };
    }
}
