// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: job_interview_analysis.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JobInterviewAnalysisService_CreateJobInterviewAnalysis_FullMethodName  = "/job_interview_analysis_service.JobInterviewAnalysisService/CreateJobInterviewAnalysis"
	JobInterviewAnalysisService_ReadJobInterviewAnalysis_FullMethodName    = "/job_interview_analysis_service.JobInterviewAnalysisService/ReadJobInterviewAnalysis"
	JobInterviewAnalysisService_UpdateJobInterviewAnalysis_FullMethodName  = "/job_interview_analysis_service.JobInterviewAnalysisService/UpdateJobInterviewAnalysis"
	JobInterviewAnalysisService_DeleteJobInterviewAnalysis_FullMethodName  = "/job_interview_analysis_service.JobInterviewAnalysisService/DeleteJobInterviewAnalysis"
	JobInterviewAnalysisService_CreateAnalysesForInterviews_FullMethodName = "/job_interview_analysis_service.JobInterviewAnalysisService/CreateAnalysesForInterviews"
	JobInterviewAnalysisService_GetAnalysesForInterviews_FullMethodName    = "/job_interview_analysis_service.JobInterviewAnalysisService/GetAnalysesForInterviews"
)

// JobInterviewAnalysisServiceClient is the client API for JobInterviewAnalysisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobInterviewAnalysisServiceClient interface {
	CreateJobInterviewAnalysis(ctx context.Context, in *CreateJobInterviewAnalysisRequest, opts ...grpc.CallOption) (*CreateJobInterviewAnalysisResponse, error)
	ReadJobInterviewAnalysis(ctx context.Context, in *ReadJobInterviewAnalysisRequest, opts ...grpc.CallOption) (*ReadJobInterviewAnalysisResponse, error)
	UpdateJobInterviewAnalysis(ctx context.Context, in *UpdateJobInterviewAnalysisRequest, opts ...grpc.CallOption) (*UpdateJobInterviewAnalysisResponse, error)
	DeleteJobInterviewAnalysis(ctx context.Context, in *DeleteJobInterviewAnalysisRequest, opts ...grpc.CallOption) (*DeleteJobInterviewAnalysisResponse, error)
	CreateAnalysesForInterviews(ctx context.Context, in *CreateAnalysesForInterviewsRequest, opts ...grpc.CallOption) (*CreateAnalysesForInterviewsResponse, error)
	GetAnalysesForInterviews(ctx context.Context, in *GetAnalysesForInterviewsRequest, opts ...grpc.CallOption) (*GetAnalysesForInterviewsResponse, error)
}

type jobInterviewAnalysisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobInterviewAnalysisServiceClient(cc grpc.ClientConnInterface) JobInterviewAnalysisServiceClient {
	return &jobInterviewAnalysisServiceClient{cc}
}

func (c *jobInterviewAnalysisServiceClient) CreateJobInterviewAnalysis(ctx context.Context, in *CreateJobInterviewAnalysisRequest, opts ...grpc.CallOption) (*CreateJobInterviewAnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateJobInterviewAnalysisResponse)
	err := c.cc.Invoke(ctx, JobInterviewAnalysisService_CreateJobInterviewAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobInterviewAnalysisServiceClient) ReadJobInterviewAnalysis(ctx context.Context, in *ReadJobInterviewAnalysisRequest, opts ...grpc.CallOption) (*ReadJobInterviewAnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadJobInterviewAnalysisResponse)
	err := c.cc.Invoke(ctx, JobInterviewAnalysisService_ReadJobInterviewAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobInterviewAnalysisServiceClient) UpdateJobInterviewAnalysis(ctx context.Context, in *UpdateJobInterviewAnalysisRequest, opts ...grpc.CallOption) (*UpdateJobInterviewAnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateJobInterviewAnalysisResponse)
	err := c.cc.Invoke(ctx, JobInterviewAnalysisService_UpdateJobInterviewAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobInterviewAnalysisServiceClient) DeleteJobInterviewAnalysis(ctx context.Context, in *DeleteJobInterviewAnalysisRequest, opts ...grpc.CallOption) (*DeleteJobInterviewAnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteJobInterviewAnalysisResponse)
	err := c.cc.Invoke(ctx, JobInterviewAnalysisService_DeleteJobInterviewAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobInterviewAnalysisServiceClient) CreateAnalysesForInterviews(ctx context.Context, in *CreateAnalysesForInterviewsRequest, opts ...grpc.CallOption) (*CreateAnalysesForInterviewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAnalysesForInterviewsResponse)
	err := c.cc.Invoke(ctx, JobInterviewAnalysisService_CreateAnalysesForInterviews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobInterviewAnalysisServiceClient) GetAnalysesForInterviews(ctx context.Context, in *GetAnalysesForInterviewsRequest, opts ...grpc.CallOption) (*GetAnalysesForInterviewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAnalysesForInterviewsResponse)
	err := c.cc.Invoke(ctx, JobInterviewAnalysisService_GetAnalysesForInterviews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobInterviewAnalysisServiceServer is the server API for JobInterviewAnalysisService service.
// All implementations must embed UnimplementedJobInterviewAnalysisServiceServer
// for forward compatibility.
type JobInterviewAnalysisServiceServer interface {
	CreateJobInterviewAnalysis(context.Context, *CreateJobInterviewAnalysisRequest) (*CreateJobInterviewAnalysisResponse, error)
	ReadJobInterviewAnalysis(context.Context, *ReadJobInterviewAnalysisRequest) (*ReadJobInterviewAnalysisResponse, error)
	UpdateJobInterviewAnalysis(context.Context, *UpdateJobInterviewAnalysisRequest) (*UpdateJobInterviewAnalysisResponse, error)
	DeleteJobInterviewAnalysis(context.Context, *DeleteJobInterviewAnalysisRequest) (*DeleteJobInterviewAnalysisResponse, error)
	CreateAnalysesForInterviews(context.Context, *CreateAnalysesForInterviewsRequest) (*CreateAnalysesForInterviewsResponse, error)
	GetAnalysesForInterviews(context.Context, *GetAnalysesForInterviewsRequest) (*GetAnalysesForInterviewsResponse, error)
	mustEmbedUnimplementedJobInterviewAnalysisServiceServer()
}

// UnimplementedJobInterviewAnalysisServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJobInterviewAnalysisServiceServer struct{}

func (UnimplementedJobInterviewAnalysisServiceServer) CreateJobInterviewAnalysis(context.Context, *CreateJobInterviewAnalysisRequest) (*CreateJobInterviewAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJobInterviewAnalysis not implemented")
}
func (UnimplementedJobInterviewAnalysisServiceServer) ReadJobInterviewAnalysis(context.Context, *ReadJobInterviewAnalysisRequest) (*ReadJobInterviewAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadJobInterviewAnalysis not implemented")
}
func (UnimplementedJobInterviewAnalysisServiceServer) UpdateJobInterviewAnalysis(context.Context, *UpdateJobInterviewAnalysisRequest) (*UpdateJobInterviewAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobInterviewAnalysis not implemented")
}
func (UnimplementedJobInterviewAnalysisServiceServer) DeleteJobInterviewAnalysis(context.Context, *DeleteJobInterviewAnalysisRequest) (*DeleteJobInterviewAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobInterviewAnalysis not implemented")
}
func (UnimplementedJobInterviewAnalysisServiceServer) CreateAnalysesForInterviews(context.Context, *CreateAnalysesForInterviewsRequest) (*CreateAnalysesForInterviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnalysesForInterviews not implemented")
}
func (UnimplementedJobInterviewAnalysisServiceServer) GetAnalysesForInterviews(context.Context, *GetAnalysesForInterviewsRequest) (*GetAnalysesForInterviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalysesForInterviews not implemented")
}
func (UnimplementedJobInterviewAnalysisServiceServer) mustEmbedUnimplementedJobInterviewAnalysisServiceServer() {
}
func (UnimplementedJobInterviewAnalysisServiceServer) testEmbeddedByValue() {}

// UnsafeJobInterviewAnalysisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobInterviewAnalysisServiceServer will
// result in compilation errors.
type UnsafeJobInterviewAnalysisServiceServer interface {
	mustEmbedUnimplementedJobInterviewAnalysisServiceServer()
}

func RegisterJobInterviewAnalysisServiceServer(s grpc.ServiceRegistrar, srv JobInterviewAnalysisServiceServer) {
	// If the following call pancis, it indicates UnimplementedJobInterviewAnalysisServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JobInterviewAnalysisService_ServiceDesc, srv)
}

func _JobInterviewAnalysisService_CreateJobInterviewAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobInterviewAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobInterviewAnalysisServiceServer).CreateJobInterviewAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobInterviewAnalysisService_CreateJobInterviewAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobInterviewAnalysisServiceServer).CreateJobInterviewAnalysis(ctx, req.(*CreateJobInterviewAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobInterviewAnalysisService_ReadJobInterviewAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadJobInterviewAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobInterviewAnalysisServiceServer).ReadJobInterviewAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobInterviewAnalysisService_ReadJobInterviewAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobInterviewAnalysisServiceServer).ReadJobInterviewAnalysis(ctx, req.(*ReadJobInterviewAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobInterviewAnalysisService_UpdateJobInterviewAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobInterviewAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobInterviewAnalysisServiceServer).UpdateJobInterviewAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobInterviewAnalysisService_UpdateJobInterviewAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobInterviewAnalysisServiceServer).UpdateJobInterviewAnalysis(ctx, req.(*UpdateJobInterviewAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobInterviewAnalysisService_DeleteJobInterviewAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobInterviewAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobInterviewAnalysisServiceServer).DeleteJobInterviewAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobInterviewAnalysisService_DeleteJobInterviewAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobInterviewAnalysisServiceServer).DeleteJobInterviewAnalysis(ctx, req.(*DeleteJobInterviewAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobInterviewAnalysisService_CreateAnalysesForInterviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnalysesForInterviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobInterviewAnalysisServiceServer).CreateAnalysesForInterviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobInterviewAnalysisService_CreateAnalysesForInterviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobInterviewAnalysisServiceServer).CreateAnalysesForInterviews(ctx, req.(*CreateAnalysesForInterviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobInterviewAnalysisService_GetAnalysesForInterviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalysesForInterviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobInterviewAnalysisServiceServer).GetAnalysesForInterviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobInterviewAnalysisService_GetAnalysesForInterviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobInterviewAnalysisServiceServer).GetAnalysesForInterviews(ctx, req.(*GetAnalysesForInterviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobInterviewAnalysisService_ServiceDesc is the grpc.ServiceDesc for JobInterviewAnalysisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobInterviewAnalysisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "job_interview_analysis_service.JobInterviewAnalysisService",
	HandlerType: (*JobInterviewAnalysisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJobInterviewAnalysis",
			Handler:    _JobInterviewAnalysisService_CreateJobInterviewAnalysis_Handler,
		},
		{
			MethodName: "ReadJobInterviewAnalysis",
			Handler:    _JobInterviewAnalysisService_ReadJobInterviewAnalysis_Handler,
		},
		{
			MethodName: "UpdateJobInterviewAnalysis",
			Handler:    _JobInterviewAnalysisService_UpdateJobInterviewAnalysis_Handler,
		},
		{
			MethodName: "DeleteJobInterviewAnalysis",
			Handler:    _JobInterviewAnalysisService_DeleteJobInterviewAnalysis_Handler,
		},
		{
			MethodName: "CreateAnalysesForInterviews",
			Handler:    _JobInterviewAnalysisService_CreateAnalysesForInterviews_Handler,
		},
		{
			MethodName: "GetAnalysesForInterviews",
			Handler:    _JobInterviewAnalysisService_GetAnalysesForInterviews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "job_interview_analysis.proto",
}
