// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: job_interview.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JobInterviewService_UnaryConversation_FullMethodName         = "/job_interview_service.JobInterviewService/UnaryConversation"
	JobInterviewService_BidirectionalConversation_FullMethodName = "/job_interview_service.JobInterviewService/BidirectionalConversation"
)

// JobInterviewServiceClient is the client API for JobInterviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobInterviewServiceClient interface {
	UnaryConversation(ctx context.Context, in *JobInterviewRequest, opts ...grpc.CallOption) (*JobInterviewResponse, error)
	BidirectionalConversation(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[JobInterviewRequest, JobInterviewResponse], error)
}

type jobInterviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobInterviewServiceClient(cc grpc.ClientConnInterface) JobInterviewServiceClient {
	return &jobInterviewServiceClient{cc}
}

func (c *jobInterviewServiceClient) UnaryConversation(ctx context.Context, in *JobInterviewRequest, opts ...grpc.CallOption) (*JobInterviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobInterviewResponse)
	err := c.cc.Invoke(ctx, JobInterviewService_UnaryConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobInterviewServiceClient) BidirectionalConversation(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[JobInterviewRequest, JobInterviewResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &JobInterviewService_ServiceDesc.Streams[0], JobInterviewService_BidirectionalConversation_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[JobInterviewRequest, JobInterviewResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JobInterviewService_BidirectionalConversationClient = grpc.BidiStreamingClient[JobInterviewRequest, JobInterviewResponse]

// JobInterviewServiceServer is the server API for JobInterviewService service.
// All implementations must embed UnimplementedJobInterviewServiceServer
// for forward compatibility.
type JobInterviewServiceServer interface {
	UnaryConversation(context.Context, *JobInterviewRequest) (*JobInterviewResponse, error)
	BidirectionalConversation(grpc.BidiStreamingServer[JobInterviewRequest, JobInterviewResponse]) error
	mustEmbedUnimplementedJobInterviewServiceServer()
}

// UnimplementedJobInterviewServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJobInterviewServiceServer struct{}

func (UnimplementedJobInterviewServiceServer) UnaryConversation(context.Context, *JobInterviewRequest) (*JobInterviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryConversation not implemented")
}
func (UnimplementedJobInterviewServiceServer) BidirectionalConversation(grpc.BidiStreamingServer[JobInterviewRequest, JobInterviewResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalConversation not implemented")
}
func (UnimplementedJobInterviewServiceServer) mustEmbedUnimplementedJobInterviewServiceServer() {}
func (UnimplementedJobInterviewServiceServer) testEmbeddedByValue()                             {}

// UnsafeJobInterviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobInterviewServiceServer will
// result in compilation errors.
type UnsafeJobInterviewServiceServer interface {
	mustEmbedUnimplementedJobInterviewServiceServer()
}

func RegisterJobInterviewServiceServer(s grpc.ServiceRegistrar, srv JobInterviewServiceServer) {
	// If the following call pancis, it indicates UnimplementedJobInterviewServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JobInterviewService_ServiceDesc, srv)
}

func _JobInterviewService_UnaryConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobInterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobInterviewServiceServer).UnaryConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobInterviewService_UnaryConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobInterviewServiceServer).UnaryConversation(ctx, req.(*JobInterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobInterviewService_BidirectionalConversation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JobInterviewServiceServer).BidirectionalConversation(&grpc.GenericServerStream[JobInterviewRequest, JobInterviewResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type JobInterviewService_BidirectionalConversationServer = grpc.BidiStreamingServer[JobInterviewRequest, JobInterviewResponse]

// JobInterviewService_ServiceDesc is the grpc.ServiceDesc for JobInterviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobInterviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "job_interview_service.JobInterviewService",
	HandlerType: (*JobInterviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryConversation",
			Handler:    _JobInterviewService_UnaryConversation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidirectionalConversation",
			Handler:       _JobInterviewService_BidirectionalConversation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "job_interview.proto",
}
